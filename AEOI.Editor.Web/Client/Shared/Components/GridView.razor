@using AEOI.Editor.Web.Shared
@inject HttpClient Http
@inject ValidationService ValidationService
<div class="controls">
    <label class="editor-label">File Name</label>
    <TelerikTextBox Class="full-width" @bind-Value="@FileName"></TelerikTextBox>
    <label class="editor-label">Large Data set</label>
    <TelerikToggleButton @bind-Selected="@IsLarge">Enabled - @IsLarge</TelerikToggleButton>
    <label class="editor-label">Number of Records</label>
    <TelerikNumericTextBox Enabled="@IsLarge" Class="full-width" @bind-Value="@Records"></TelerikNumericTextBox>
    <br />
    <TelerikButton OnClick="@LoadData" Primary="true">Load data</TelerikButton>
</div>

<TelerikListView Data=@Data
                 Pageable="true"
                 Height="500px"
                 OnUpdate="@UpdateHandler"
                 OnDelete="@DeleteHandler"
                 OnCreate="@CreateHandler">
    <HeaderTemplate>
        <ListViewCommandButton Command="Add">Add</ListViewCommandButton>
    </HeaderTemplate>
    <Template>
        <div class="k-card k-card-horizontal">
            <div class="k-card-body">
                <div class="k-hbox k-justify-content-between k-flex-wrap">
                    <div class="product-name">
                        @if (context.AccountNumber != null)
                        {
                            <h4 class="k-card-title">@context.AccountNumber.Value</h4>
                        }

                        <h5 class="k-card-subtitle">@context.AccountHolderType</h5>
                    </div>
                    <div class="product-price">
                        @if (context.Person != null)
                        {
                            <div>First Name: @context.Person.FirstName</div>
                            <div>Last Name: @context.Person.LastName</div>
                        }

                        @if (context.Organisation != null && context.Organisation.ControllingPerson != null)
                        {
                            <div>First Name: @context.Organisation.ControllingPerson.Person.FirstName</div>
                            <div>Last Name: @context.Organisation.ControllingPerson.Person.LastName</div>
                        }

                    </div>
                </div>
            </div>
            <div class="product-actions">
                <ListViewCommandButton Command="Edit">Edit</ListViewCommandButton>
                <ListViewCommandButton Command="Delete">Delete</ListViewCommandButton>
            </div>
        </div>
    </Template>
    <EditTemplate>
        <div class="k-card k-card-horizontal">
            <div class="k-card-body">
                <div class="k-hbox k-justify-content-between k-flex-wrap">
                    <div class="product-name">
                        <label class="editor-label">Name</label>
                        @if (context.AccountNumber != null)
                        {
                            <TelerikTextBox @bind-Value="@context.AccountNumber.Value" Class="mb-sm"></TelerikTextBox>
                        }
                        <label class="editor-label">Account Holder Type</label>
                        <TelerikDropDownList Data="@AccountHolderTypes"
                                             @bind-Value="@context.AccountHolderType"
                                             DefaultText="Choose Type"
                                             Width="12.4em">
                        </TelerikDropDownList>
                    </div>
                    <div class="product-price">
                        <label class="editor-label">Account Balance</label>
                        <TelerikNumericTextBox @bind-Value="@context.AccountBalance.Value" Class="mb-sm"></TelerikNumericTextBox>

                        @if (context.Person != null)
                        {
                            <label class="editor-label">First Name</label>
                            <TelerikTextBox @bind-Value="@context.Person.FirstName"></TelerikTextBox>

                            <label class="editor-label">Last Name</label>
                            <TelerikTextBox @bind-Value="@context.Person.LastName"></TelerikTextBox>
                        }

                        @if (context.Organisation != null && context.Organisation.ControllingPerson != null)
                        {
                            <label class="editor-label">First Name</label>
                            <TelerikTextBox @bind-Value="@context.Organisation.ControllingPerson.Person.FirstName"></TelerikTextBox>

                            <label class="editor-label">Last Name</label>
                            <TelerikTextBox @bind-Value="context.Organisation.ControllingPerson.Person.LastName"></TelerikTextBox>
                        }
                    </div>
                </div>
            </div>
            <div class="product-actions">
                <ListViewCommandButton Command="Save">Save</ListViewCommandButton>
                <ListViewCommandButton Command="Cancel">Cancel</ListViewCommandButton>
            </div>
        </div>
    </EditTemplate>
</TelerikListView>

<div class="controls">
    <label class="editor-label">Errors</label>
    <TelerikTextArea AutoSize Class="full-width" @bind-Value="@Errors"></TelerikTextArea>
</div>

@code {
    public IEnumerable<AEOIUKSubmissionFIReportSubmissionFIReturnAccountData> Data { get; set; }
    public IEnumerable<string> AccountHolderTypes { get; set; }
    private AEOIUKSubmissionFIReport report;
    public string FileName { get; set; } = "AEOI_ v2.0_Example_New_Submission 1.xml";
    public bool IsLarge { get; set; }
    public bool IsNotLarge => !IsLarge;
    public int Records { get; set; }
    public string Errors { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        AccountHolderTypes = new string[] { "Passive Non Financial Entity with Controlling Person(s)", "Reportable Person (Individual)" };
    }

    private async Task LoadData()
    {
        report = await Http.GetFromJsonAsync<AEOIUKSubmissionFIReport>($"api/Data/GetData?filename={FileName}&large={IsLarge}&records={Records}");
        Data = report.Submission.FIReturn.AccountData;
    }

    public async Task UpdateHandler(ListViewCommandEventArgs args)
    {
        var item = args.Item as AEOIUKSubmissionFIReportSubmissionFIReturnAccountData;
        var original = Data.FirstOrDefault(i => i.AccountAction.AccountRef == item.AccountAction.AccountRef);
        if (original.Person != null)
        {
            original.Person.FirstName = item.Person.FirstName;
            original.Person.LastName = item.Person.LastName;
        }
        else
        {
            original.Organisation.ControllingPerson.Person.FirstName = item.Organisation.ControllingPerson.Person.FirstName;
            original.Organisation.ControllingPerson.Person.LastName = item.Organisation.ControllingPerson.Person.LastName;
        }

        var errors = await ValidationService.Validate(report);

        if(errors.Count == 0)
        {
            Errors = string.Empty;
        }else
        {
            Errors = string.Join(Environment.NewLine, errors);
        }
        
    }

    public void DeleteHandler(ListViewCommandEventArgs args)
    {

    }

    public void CreateHandler(ListViewCommandEventArgs args)
    {

    }
}

<style>
    .full-width {
        width: 100%;
    }

    .k-listview-header {
        padding: 10px 20px;
    }

    .controls {
        padding: 10px 20px;
        border-width: 1px 1px 1px 1px;
        border-radius: 0;
        border-style: solid;
        box-shadow: none;
    }

    .k-card {
        padding: 10px 20px;
        border-width: 0 0 1px 0;
        border-radius: 0;
        box-shadow: none;
    }

    .k-card-body {
        padding: 0;
    }

    .k-card:last-child {
        border-bottom: 0;
    }

    .k-card .k-card-title {
        padding: 0;
        font-size: 1.2em;
        font-weight: bold;
        line-height: normal;
    }

    .k-card-subtitle {
        font-size: 1em;
        margin-bottom: 0;
    }

    .product-name {
        width: 50%;
        min-width: 200px;
        padding: 5px 0;
    }

    .product-price {
        width: 50%;
        min-width: 200px;
        padding: 5px 0;
    }

    .editor-label {
        margin: 0;
        font-size: .875em;
        display: block;
    }
</style>